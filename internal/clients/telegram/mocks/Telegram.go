// Code generated by mockery v2.53.2. DO NOT EDIT.

package mocks

import (
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api"
	mock "github.com/stretchr/testify/mock"
)

// Telegram is an autogenerated mock type for the Telegram type
type Telegram struct {
	mock.Mock
}

// GetUpdatesChan provides a mock function with no fields
func (_m *Telegram) GetUpdatesChan() (tgbotapi.UpdatesChannel, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetUpdatesChan")
	}

	var r0 tgbotapi.UpdatesChannel
	var r1 error
	if rf, ok := ret.Get(0).(func() (tgbotapi.UpdatesChannel, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() tgbotapi.UpdatesChannel); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(tgbotapi.UpdatesChannel)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Send provides a mock function with given fields: message
func (_m *Telegram) Send(message tgbotapi.MessageConfig) (tgbotapi.Message, error) {
	ret := _m.Called(message)

	if len(ret) == 0 {
		panic("no return value specified for Send")
	}

	var r0 tgbotapi.Message
	var r1 error
	if rf, ok := ret.Get(0).(func(tgbotapi.MessageConfig) (tgbotapi.Message, error)); ok {
		return rf(message)
	}
	if rf, ok := ret.Get(0).(func(tgbotapi.MessageConfig) tgbotapi.Message); ok {
		r0 = rf(message)
	} else {
		r0 = ret.Get(0).(tgbotapi.Message)
	}

	if rf, ok := ret.Get(1).(func(tgbotapi.MessageConfig) error); ok {
		r1 = rf(message)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewTelegram creates a new instance of Telegram. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTelegram(t interface {
	mock.TestingT
	Cleanup(func())
}) *Telegram {
	mock := &Telegram{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
